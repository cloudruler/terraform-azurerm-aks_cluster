#cloud-config
ssh_authorized_keys:
#brianmoore
- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+HxnuN1D7vtkxABtAxRizT2RrUha45M3qBABWKBJAEJqev9gUC0zRxAwW6Eh8lhfv9jKcnekMkOZNPrR/Bx5cuv0hACDxF4nb2trcFTK2IOuaGidk3zld71jQYDnpVes9BSqcMkn9nmx8Nl7p5KPt1foTSezdZq/neiOZ/vV5r8iPmSOwxigYFP2G70P2dMFTY+KyoWDk60WAjr2g6EHSdI4GgR6kghgMAcVuljnseDJVLmYn8I/B2FSXH7APtd0h6J673S8wPZuNzIEYzm/KEobBn0EpnhyqfOjN5VLdNOUGpXb/VPNXeKaB3KoOzEh20FkaVJmNXlN0WKC1hyCl brian@DESKTOP-SFIVOEU
package_upgrade: true
packages:
#Install packages needed to use the Kubernetes apt repository:
- apt-transport-https
- ca-certificates
- curl
write_files:
- path: /etc/environment
  #Suppress Warning: apt-key output should not be parsed (stdout is not a terminal)
  content: |
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1"
  append: true
# kubeadm config file
- path: /etc/kubeadm/config.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${configs_kubeadm}
# calico config file
- path: /tmp/calico.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${configs_calico}
#Make sure that the overlay and br_netfilter module is loaded
- path: /etc/modules-load.d/k8s.conf
  permissions: '0644'
  content: |
    overlay
    br_netfilter
#As a requirement for your Linux Node's iptables to correctly see bridged traffic, you should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config
- path: /etc/sysctl.d/k8s.conf
  permissions: '0644'
  content: |
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
runcmd:
#Set up dependencies
- [ modprobe, overlay ]
- [ modprobe, br_netfilter ]
#Apply the /etc/sysctl.d/k8s.conf config file to enable IP forwarding and netfilter settings across reboots
- [ sysctl, --system ]
#Add a new repository for the cri-o software
- [ sh, -c, 'echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${ crio_version }/${ crio_os_version }/ /" | tee -a /etc/apt/sources.list.d/cri-0.list' ]
#Add the package key for the cri-o software
- [ sh, -c, 'curl -L http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${ crio_version }/${ crio_os_version }/Release.key | apt-key add -' ]
#Add the repository for libcontainer information
- [ sh, -c, 'echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${ crio_os_version }/ /" | tee -a /etc/apt/sources.list.d/libcontainers.list' ]
#Add the package key for libcontainer information
- [ sh, -c, 'curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${ crio_os_version }/Release.key | apt-key add -' ]
#Add the Kubernetes apt repository:
- [ sh, -c, 'echo deb https://apt.kubernetes.io/ kubernetes-xenial main | tee -a /etc/apt/sources.list.d/kubernetes.list' ]
#Download the Google Cloud public signing key
- [ sh, -c, 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -' ]
- [ apt-get, update ]
#Install cri-io and runc
- [ apt-get, install, -y, cri-o, cri-o-runc ]
- [ systemctl, daemon-reload ]
- [ systemctl, enable, crio ]
- [ systemctl, start, crio ]
#Install kubelet and kubeadm
- [ apt-get, install, -y, kubelet=1.22.1-00, kubeadm=1.22.1-00 ]
- [ apt-mark, hold, kubelet, kubeadm ]
%{ if node_type == "master" ~}
#If this is a master node, grab the certs we need
- [ mkdir, -p, /etc/kubernetes/pki/etcd ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.crt, /etc/kubernetes/pki/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.prv, /etc/kubernetes/pki/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.crt, /etc/kubernetes/pki/etcd/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.prv, /etc/kubernetes/pki/etcd/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.crt, /etc/kubernetes/pki/front-proxy-ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.prv, /etc/kubernetes/pki/front-proxy-ca.key ]
%{ if action == "init" ~}
#Install kubectl which is only needed on the first master node
- [ apt-get, install, -y, kubectl=1.22.1-00 ]
- [ apt-mark, hold, kubectl ]
#Initialize the control plane
- [ sh, -c, 'kubeadm init --config /etc/kubeadm/config.yaml' ]
#Install Calico CNI plugin
- [ kubectl, apply, -f, /tmp/calico.yaml, '--kubeconfig=/etc/kubernetes/admin.conf' ]
#Set up the admin kubeconfig
- [ mkdir, -p, /home/${admin_username}/.kube ]
- [ cp, /etc/kubernetes/admin.conf, /home/${admin_username}/.kube/config ]
- [ chown, '${admin_username}:${admin_username}', /home/${admin_username}/.kube/config ]
#Set up bash completion for the admin user
- [ sh, -c, 'echo "source <(kubectl completion bash)" | tee -a /home/${admin_username}/.bashrc' ]
#If this is a master node but we are doing a join
%{ else ~}
#Join the control plane node to the cluster
- [ sh, -c, 'kubeadm join --config /etc/kubeadm/config.yaml --control-plane']
%{ endif ~}
#If this is a worker node
%{ else ~}
#Join the worker to the cluster
- [ sh, -c, 'kubeadm join --config /etc/kubeadm/config.yaml']
%{ endif ~}
