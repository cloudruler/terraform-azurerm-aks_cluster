%{ if node_type == "master" ~}
kind: InitConfiguration
apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: ${bootstrap_token}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
localAPIEndpoint:
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///var/run/crio/crio.sock
  taints: null
---
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta2
controlPlaneEndpoint: ${api_server_name}
apiServer:
  timeoutForControlPlane: 4m0s
#   certSANS:
#     - k8s.cloudruler.com  
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: k8s.gcr.io
kubernetesVersion: 1.22.1
networking:
  dnsDomain: cluster.local
  serviceSubnet: ${ k8s_service_subnet }
  podSubnet: ${ pod_subnet_cidr }
controllerManager: {}
scheduler: {}
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd
clusterDNS:
- ${cluster_dns}
staticPodPath: /etc/kubernetes/manifests
clusterDomain: cluster.local
cpuManagerReconcilePeriod: 0s
evictionPressureTransitionPeriod: 0s
fileCheckFrequency: 0s
healthzBindAddress: 127.0.0.1
healthzPort: 10248
httpCheckFrequency: 0s
imageMinimumGCAge: 0s
logging: {}
nodeStatusReportFrequency: 0s
nodeStatusUpdateFrequency: 0s
resolvConf: /run/systemd/resolve/resolv.conf
rotateCertificates: true
runtimeRequestTimeout: 0s
shutdownGracePeriod: 0s
shutdownGracePeriodCriticalPods: 0s
streamingConnectionIdleTimeout: 0s
syncFrequency: 0s
volumeStatsAggPeriod: 0s
authentication:
  anonymous:
    enabled: false
  webhook:
    cacheTTL: 0s
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt
authorization:
  mode: Webhook
  webhook:
    cacheAuthorizedTTL: 0s
    cacheUnauthorizedTTL: 0s
%{ else ~}
# kind: JoinConfiguration
# apiVersion: kubeadm.k8s.io/v1beta2
# discovery:
#   bootstrapToken:
#     apiServerEndpoint: ${api_server_name}:6443
#     token: ${bootstrap_token}
#     unsafeSkipCAVerification: false
#     caCertHashes:
#     - ${discovery_token_ca_cert_hash}
#   tlsBootstrapToken: ${bootstrap_token}
# nodeRegistration:
#   criSocket: unix:///run/containerd/containerd.sock
#   kubeletExtraArgs:
#     v: '4'
#     volume-plugin-dir: /etc/kubernetes/volumeplugins
%{ endif ~}